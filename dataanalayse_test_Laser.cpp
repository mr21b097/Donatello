#include <iostream>
#include <string>
#include <regex>
#include <vector>

class LaserAnalyse {
private:
    std::string input;
    std::string startMarker;
    std::string endMarker;

public:
    // Constructor
    LaserAnalyse(const std::string& input, const std::string& startMarker = "---START---", const std::string& endMarker = "___END___")
        : input(input), startMarker(startMarker), endMarker(endMarker) {}

    // Method to analyze the laser data
    void analyze() {
        // Check if both markers exist
        size_t startPos = input.find(startMarker);
        size_t endPos = input.find(endMarker);

        if (startPos != std::string::npos && endPos != std::string::npos) {
            // Extract the data between markers
            startPos += startMarker.length();
            std::string jsonData = input.substr(startPos, endPos - startPos);

            // Find the ranges array in the JSON data
            std::regex rangesRegex("\"ranges\":\\s*\\[(.*?)\\]");
            std::smatch matches;
            if (std::regex_search(jsonData, matches, rangesRegex)) {
                std::string rangesString = matches[1].str();

                // Parse the ranges into a vector
                std::vector<float> ranges;
                std::regex numberRegex("-?\\d+(\\.\\d+)?");
                auto numbersBegin = std::sregex_iterator(rangesString.begin(), rangesString.end(), numberRegex);
                auto numbersEnd = std::sregex_iterator();

                for (std::sregex_iterator i = numbersBegin; i != numbersEnd; ++i) {
                    ranges.push_back(std::stof((*i).str()));
                }

                // Check if the ranges array has exactly 360 values
                if (ranges.size() == 360) {
                    std::cout << "Extracted ranges:" << std::endl;
                    for (float range : ranges) {
                        std::cout << range << " ";
                    }
                    std::cout << std::endl;
                } else {
                    std::cerr << "Error: Ranges array does not contain exactly 360 values. Found: " << ranges.size() << std::endl;
                }
            } else {
                std::cerr << "Ranges array not found in the data." << std::endl;
            }
        } else {
            std::cerr << "Markers not found in the input string." << std::endl;
        }
    }
};

int main() {

    std::string input = R"("---START---{"header": {"seq": 22217, "stamp": {"secs": 1706294554, "nsecs": 63001548}, "frame_id": "base_scan"}, "angle_min": 0.0, "angle_max": 6.2657318115234375, "angle_increment": 0.01745329238474369, "time_increment": 0.0005592841189354658, "scan_time": 0.20134228467941284, "range_min": 0.11999999731779099, "range_max": 3.5, "ranges": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6169999837875366, 0.753000020980835, 0.0, 2.9639999866485596, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8840000033378601, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.30000001192092896, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3380000591278076, 1.315999984741211, 1.2760000228881836, 1.2319999933242798, 1.2139999866485596, 1.2070000171661377, 1.1649999618530273, 1.1490000486373901, 1.1480000019073486, 1.121999979019165, 1.1119999885559082, 1.100000023841858, 1.1030000448226929, 1.0709999799728394, 1.065999984741211, 1.1330000162124634, 1.1030000448226929, 1.190000057220459, 1.2170000076293945, 0.9319999814033508, 0.9319999814033508, 0.9520000219345093, 0.9539999961853027, 0.9620000123977661, 0.9559999704360962, 1.034999966621399, 0.9660000205039978, 0.9660000205039978, 0.9660000205039978, 0.949999988079071, 0.949999988079071, 0.9639999866485596, 0.9570000171661377, 0.9430000185966492, 0.9259999990463257, 0.8889999985694885, 0.8730000257492065, 0.8629999756813049, 0.843999981880188, 0.8309999704360962, 0.796999990940094, 0.7879999876022339, 0.781000018119812, 0.7770000100135803, 0.765999972820282, 0.753000020980835, 0.5680000185966492, 0.5600000023841858, 0.5529999732971191, 0.5519999861717224, 0.5519999861717224, 0.5550000071525574, 0.5600000023841858, 0.5680000185966492, 0.5770000219345093, 0.5870000123977661, 0.5979999899864197, 0.6110000014305115, 0.621999979019165, 0.6320000290870667, 1.0789999961853027, 0.0, 0.9879999756813049, 0.9729999899864197, 0.9589999914169312, 0.9490000009536743, 0.8790000081062317, 0.9229999780654907, 0.8140000104904175, 0.8289999961853027, 0.8560000061988831, 0.7639999985694885, 0.8220000267028809, 0.8339999914169312, 0.9279999732971191, 0.9449999928474426, 0.0, 2.0329999923706055, 2.0789999961853027, 2.0859999656677246, 0.8700000047683716, 0.8700000047683716, 0.8730000257492065, 0.871999979019165, 0.8550000190734863, 0.8650000095367432, 0.8820000290870667, 0.8830000162124634, 0.871999979019165, 0.8619999885559082, 0.8669999837875366, 0.8460000157356262, 0.8360000252723694, 0.8479999899864197, 0.8659999966621399, 0.859000027179718, 0.8579999804496765, 0.875, 0.875, 0.8790000081062317, 0.8799999952316284, 0.9010000228881836, 0.8920000195503235, 0.9139999747276306, 0.9089999794960022, 0.9120000004768372, 0.9290000200271606, 0.921999990940094, 0.9779999852180481, 3.1440000534057617, 3.191999912261963, 3.1470000743865967, 3.2809998989105225, 3.367000102996826, 3.447000026702881, 3.4489998817443848, 3.5360000133514404, 3.5250000953674316, 3.678999900817871, 3.812000036239624, 3.818000078201294, 3.882999897003174, 4.138999938964844, 0.0, 0.0, 4.151000022888184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1599999964237213, 0.21199999749660492, 0.21199999749660492, 0.20399999618530273, 0.21699999272823334, 0.21699999272823334, 0.21799999475479126, 0.23100000619888306, 0.23600000143051147, 0.24199999868869781, 0.25600001215934753, 0.25600001215934753, 0.25699999928474426, 0.26100000739097595, 0.0, 0.0, 0.23399999737739563, 0.0, 0.0, 0.0, 0.3269999921321869, 0.3330000042915344, 0.33899998664855957, 0.34299999475479126, 0.34599998593330383, 0.35100001096725464, 0.3569999933242798, 0.37400001287460327, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.878999948501587, 1.8109999895095825, 1.8380000591278076, 1.8880000114440918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09399999678134918, 0.09399999678134918, 0.0949999988079071, 0.09399999678134918, 0.09300000220537186, 0.09200000017881393, 0.09099999815225601, 0.0, 0.0], "intensities": [0.0, 0.0, 47.0, 0.0, 48.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3278.0, 278.0, 147.0, 102.0, 143.0, 0.0, 0.0, 0.0, 0.0, 62.0, 0.0, 0.0, 1808.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 56.0, 2270.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 33.0, 48.0, 52.0, 767.0, 908.0, 1110.0, 1147.0, 981.0, 1004.0, 1882.0, 1856.0, 1969.0, 1799.0, 1362.0, 1323.0, 1544.0, 1576.0, 1555.0, 1413.0, 1049.0, 771.0, 476.0, 718.0, 1369.0, 1570.0, 1707.0, 1741.0, 1598.0, 1201.0, 995.0, 2311.0, 1706.0, 2322.0, 1814.0, 2211.0, 2521.0, 1158.0, 2427.0, 2594.0, 2811.0, 2846.0, 3320.0, 1885.0, 2750.0, 3164.0, 3238.0, 3077.0, 2697.0, 2058.0, 2725.0, 3500.0, 3953.0, 4085.0, 3758.0, 4047.0, 4026.0, 3735.0, 3607.0, 4149.0, 4061.0, 3745.0, 4263.0, 1829.0, 472.0, 125.0, 324.0, 135.0, 248.0, 299.0, 308.0, 442.0, 485.0, 533.0, 530.0, 587.0, 601.0, 587.0, 496.0, 306.0, 0.0, 469.0, 457.0, 412.0, 888.0, 1713.0, 2358.0, 3017.0, 2853.0, 1739.0, 3189.0, 2123.0, 2721.0, 3037.0, 3018.0, 2845.0, 2736.0, 2228.0, 2097.0, 2963.0, 1718.0, 3209.0, 2656.0, 3005.0, 2816.0, 2679.0, 2539.0, 1822.0, 2260.0, 3008.0, 2662.0, 2900.0, 662.0, 303.0, 296.0, 304.0, 290.0, 281.0, 278.0, 281.0, 273.0, 267.0, 252.0, 244.0, 242.0, 233.0, 123.0, 258.0, 356.0, 320.0, 129.0, 122.0, 319.0, 0.0, 0.0, 1194.0, 939.0, 1071.0, 1290.0, 1324.0, 1125.0, 1255.0, 1125.0, 1197.0, 940.0, 254.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 49.0, 345.0, 5391.0, 12757.0, 6868.0, 6569.0, 7572.0, 7190.0, 2503.0, 6541.0, 6510.0, 5765.0, 3708.0, 3537.0, 5298.0, 0.0, 0.0, 2090.0, 151.0, 183.0, 39.0, 1437.0, 1605.0, 1495.0, 1094.0, 902.0, 790.0, 382.0, 107.0, 81.0, 0.0, 0.0, 0.0, 181.0, 177.0, 173.0, 166.0, 164.0, 156.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 64.0, 75.0, 71.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 138.0, 153.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 53.0, 69.0, 82.0, 107.0, 293.0, 324.0, 329.0, 317.0, 311.0, 242.0, 259.0, 234.0, 101.0, 134.0, 89.0, 84.0, 61.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 59.0, 105.0, 45.0, 77.0, 74.0, 49.0, 61.0, 47.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 105.0, 2095.0, 1957.0, 1995.0, 2246.0, 2305.0, 2255.0, 3861.0, 54.0]}___END___")"; // Replace "..." with actual values
    LaserAnalyse laserAnalyse(input);
    laserAnalyse.analyze();
    return 0;



    /*
    std::string input = R"(Client 1 Ausgabe:
---START---{"header": {"seq": 8251, "stamp": {"secs": 1706291736, "nsecs": 962803091}, "frame_id": "base_scan"}, "angle_min": 0.0, "angle_max": 6.2657318115234375, "angle_increment": 0.01745329238474369, "time_increment": 0.0005592841189354658, "scan_time": 0.20134228467941284, "range_min": 0.11999999731779099, "range_max": 3.5, "ranges": [0.32899999618530273, 0.33000001311302185, 0.33000001311302185, 0.3310000002384186, 0.3330000042915344, 0.335999995470047, 0.33500000834465027, 0.33399999141693115, 0.0, 0.33799999952316284, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0850000381469727, 1.1039999723434448, 1.0829999446868896, 1.065999984741211, 1.0820000171661377, 1.093999981880188, 1.1069999933242798, 1.125, 1.1770000457763672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3610000014305115, 0.3610000014305115, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6620000004768372, 0.6620000004768372, 0.6460000276565552, 0.6209999918937683, 0.6060000061988831, 0.597000002861023, 0.5839999914169312, 0.5709999799728394, 0.5590000152587891, 0.5479999780654907, 0.5379999876022339, 0.527999997138977, 0.5180000066757202, 0.5090000033378601, 0.5019999742507935, 0.4970000088214874, 0.4959999918937683, 0.4959999918937683, 0.4959999918937683, 0.4970000088214874, 0.49900001287460327, 0.49900001287460327, 0.5009999871253967, 0.503000020980835, 0.5049999952316284, 0.49900001287460327, 0.4950000047683716, 0.492000013589859, 0.48899999260902405, 0.4869999885559082, 0.4869999885559082, 0.4880000054836273, 0.4909999966621399, 0.4950000047683716, 0.49900001287460327, 0.5059999823570251, 0.5139999985694885, 0.5239999890327454, 0.5360000133514404, 0.0, 2.1989998817443848, 2.1600000858306885, 2.1519999504089355, 2.13100004196167, 2.1110000610351562, 2.1029999256134033, 2.0999999046325684, 2.055999994277954, 1.8919999599456787, 2.058000087738037, 1.8209999799728394, 1.805999994277954, 1.8580000400543213, 1.8569999933242798, 1.9160000085830688, 1.86899995803833, 1.902999997138977, 1.9179999828338623, 2.003000020980835, 1.9889999628067017, 1.9229999780654907, 1.934000015258789, 1.8760000467300415, 1.7389999628067017, 1.7269999980926514, 1.7269999980926514, 1.6710000038146973, 1.718999981880188, 1.687000036239624, 1.6139999628067017, 1.6080000400543213, 1.6770000457763672, 1.6740000247955322, 1.6660000085830688, 1.6319999694824219, 1.8849999904632568, 0.5289999842643738, 0.5289999842643738, 0.5199999809265137, 0.5139999985694885, 0.5099999904632568, 0.5090000033378601, 0.5080000162124634, 0.5109999775886536, 0.5130000114440918, 0.5149999856948853, 0.5199999809265137, 0.527999997138977, 0.5400000214576721, 0.5389999747276306, 0.5460000038146973, 0.550000011920929, 0.5529999732971191, 0.5559999942779541, 0.5590000152587891, 0.5640000104904175, 0.5690000057220459, 0.5730000138282776, 0.574999988079071, 0.5770000219345093, 0.5820000171661377, 0.5870000123977661, 0.5960000157356262, 0.6039999723434448, 0.6100000143051147, 0.6110000014305115, 0.6169999837875366, 0.625, 0.628000020980835, 0.6510000228881836, 0.6639999747276306, 0.6800000071525574, 0.6800000071525574, 0.6819999814033508, 0.6940000057220459, 0.0, 3.2920000553131104, 3.2929999828338623, 3.252000093460083, 3.2119998931884766, 3.255000114440918, 3.2980000972747803, 3.444000005722046, 3.503999948501587, 3.510999917984009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.132999897003174, 3.130000114440918, 3.1470000743865967, 3.117000102996826, 3.114000082015991, 3.125999927520752, 0.0, 0.0, 3.2209999561309814, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7889999747276306, 0.8069999814033508, 0.0, 0.7870000004768372, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3619999885559082, 0.3619999885559082, 0.35899999737739563, 0.35600000619888306, 0.34200000762939453, 0.335999995470047, 0.3330000042915344, 0.3310000002384186, 0.32899999618530273, 0.32899999618530273, 0.32899999618530273, 0.328000009059906, 0.328000009059906, 0.328000009059906, 0.328000009059906, 0.3269999921321869, 0.3269999921321869, 0.3269999921321869, 0.328000009059906, 0.32899999618530273], "intensities": [5481.0, 4930.0, 5454.0, 4104.0, 4288.0, 2895.0, 3896.0, 3843.0, 6251.0, 1095.0, 0.0, 0.0, 72.0, 58.0, 70.0, 64.0, 71.0, 2160.0, 2676.0, 2326.0, 2304.0, 1897.0, 2263.0, 1545.0, 1482.0, 1524.0, 0.0, 0.0, 0.0, 0.0, 43.0, 75.0, 61.0, 52.0, 52.0, 0.0, 47.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1369.0, 4083.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 92.0, 89.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 32.0, 34.0, 0.0, 65.0, 76.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 36.0, 74.0, 64.0, 0.0, 0.0, 67.0, 101.0, 97.0, 2371.0, 3161.0, 3109.0, 3074.0, 3799.0, 3228.0, 3308.0, 3623.0, 3690.0, 3461.0, 4004.0, 4349.0, 4580.0, 4184.0, 3932.0, 4227.0, 3889.0, 4054.0, 4547.0, 3806.0, 4171.0, 4130.0, 3871.0, 4387.0, 5127.0, 4560.0, 4304.0, 3869.0, 4185.0, 3873.0, 4793.0, 3832.0, 4241.0, 3747.0, 4875.0, 3846.0, 4637.0, 4630.0, 4428.0, 0.0, 588.0, 708.0, 753.0, 775.0, 803.0, 843.0, 805.0, 794.0, 471.0, 890.0, 535.0, 805.0, 466.0, 423.0, 344.0, 294.0, 372.0, 406.0, 668.0, 987.0, 270.0, 698.0, 444.0, 610.0, 755.0, 840.0, 884.0, 893.0, 530.0, 1034.0, 717.0, 794.0, 870.0, 993.0, 923.0, 483.0, 2666.0, 3507.0, 4651.0, 3670.0, 3662.0, 5783.0, 4202.0, 4319.0, 3981.0, 5363.0, 5760.0, 4752.0, 3421.0, 3558.0, 3969.0, 3657.0, 4146.0, 3846.0, 3569.0, 3552.0, 3809.0, 3803.0, 3588.0, 3808.0, 3791.0, 2890.0, 3593.0, 4507.0, 2903.0, 3500.0, 3059.0, 3316.0, 2962.0, 5708.0, 2763.0, 3890.0, 3167.0, 4505.0, 3072.0, 40.0, 369.0, 405.0, 415.0, 398.0, 174.0, 284.0, 272.0, 270.0, 429.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 55.0, 0.0, 51.0, 0.0, 0.0, 0.0, 58.0, 51.0, 59.0, 60.0, 95.0, 480.0, 481.0, 498.0, 502.0, 494.0, 132.0, 0.0, 0.0, 304.0, 6211.0, 365.0, 0.0, 0.0, 118.0, 1185.0, 718.0, 51.0, 205.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 102.0, 102.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 45.0, 0.0, 42.0, 0.0, 50.0, 44.0, 0.0, 57.0, 46.0, 56.0, 54.0, 66.0, 67.0, 67.0, 74.0, 59.0, 84.0, 71.0, 84.0, 75.0, 93.0, 95.0, 227.0, 218.0, 255.0, 394.0, 610.0, 963.0, 1142.0, 1668.0, 2699.0, 3877.0, 4601.0, 4664.0, 4571.0, 4148.0, 4327.0, 5066.0, 4851.0, 5382.0, 4660.0, 4735.0]}___END___)";

    // Marker definitions
    std::string startMarker = "---START---";
    std::string endMarker = "___END___";

    // Check if both markers exist
    size_t startPos = input.find(startMarker);
    size_t endPos = input.find(endMarker);

    if (startPos != std::string::npos && endPos != std::string::npos) {
        // Extract the data between markers
        startPos += startMarker.length();
        std::string jsonData = input.substr(startPos, endPos - startPos);

        // Find the ranges array in the JSON data
        std::regex rangesRegex("\"ranges\":\\s*\\[(.*?)\\]");
        std::smatch matches;
        if (std::regex_search(jsonData, matches, rangesRegex)) {
            std::string rangesString = matches[1].str();

            // Parse the ranges into a vector
            std::vector<float> ranges;
            std::regex numberRegex("-?\\d+(\\.\\d+)?");
            auto numbersBegin = std::sregex_iterator(rangesString.begin(), rangesString.end(), numberRegex);
            auto numbersEnd = std::sregex_iterator();

            for (std::sregex_iterator i = numbersBegin; i != numbersEnd; ++i) {
                ranges.push_back(std::stof((*i).str()));
            }

            // Check if the ranges array has exactly 360 values
            if (ranges.size() == 360) {
                std::cout << "Extracted ranges:" << std::endl;
                for (float range : ranges) {
                    std::cout << range << " ";
                }
                std::cout << std::endl;
            } else {
                std::cout << "Error: Ranges array does not contain exactly 360 values. Found: " << ranges.size() << std::endl;
            }
        } else {
            std::cout << "Ranges array not found in the JSON data." << std::endl;
        }
    } else {
        std::cout << "Markers not found in the input string." << std::endl;
    }
*/
    return 0;
}
